# -*- coding: utf-8 -*-
"""classificacao_multiclasse.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eexQ3r-wJH0fW0rUfGFxEsZrRQm5RcuK

**Importar bibliotecas**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
# ROC: receiver operating characteristic curve, AUC: area under the ROC curve
from sklearn.metrics import roc_auc_score

from google.colab import drive

"""**Problema**

Um hospital com médicos muito qualificados quer expandir o conhecimento sobre saúde de fetos (avaliação da gravidez) para lugares mais carentes. Assim, um hospital com poucos médicos - que não dão conta da demanda - poderia usar o modelo para avaliar de maneira automatizada a gravidez de quem não pode ser atendida por um médico.

**Variável resposta é multiclasse**

fetal_health: 

*  1: Normal
*  2: Suspeito
*  3: Doente
"""

drive.mount('/content/drive')

PATH='drive/My Drive/FLAI/00_fundamentos/01_classificacao/'
df=pd.read_csv(PATH+'fetal_health.csv', sep=',')

df

"""**Separar variáveis**"""

X = df.drop('fetal_health', axis='columns') # joga fora a variável resposta e mantém o resto
Y = df.fetal_health # guarda a variável resposta

print('1: Normal\n2: Suspeito\n3: Doente\n')

print('Quantidades:')
print(Y.value_counts()) # ver quanto tem de cada em fetal_health

print('\nProporção (em relação ao total):')
print(Y.value_counts()/Y.shape[0])

"""**Separar em conjuntos de treinamento e de teste e treinar modelo**"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)

rf = RandomForestClassifier(n_estimators=1000, max_depth=8, n_jobs=-1)

rf.fit(X_train, Y_train)

"""**Testar modelo**"""

pd.DataFrame(rf.predict_proba(X_test), columns=[ 
    'Normal',
    'Suspeito',
    'Doente'
 ])

"""**Avaliar modelo**"""

# Normal
print('Taxa de acerto para Normal:', roc_auc_score(Y_test==1, rf.predict_proba(X_test)[:,0])) # todas as linhas, coluna 'Normal'
print('Taxa de acerto para Suspeito:',roc_auc_score(Y_test==2, rf.predict_proba(X_test)[:,1])) # todas as linhas, coluna 'Suspeito'
print('Taxa de acerto para Doente:',roc_auc_score(Y_test==3, rf.predict_proba(X_test)[:,2])) # todas as linhas, coluna 'Doente'

"""**Histogramas**

*  Histograma para Normal
*  Histograma para Suspeito
*  Histograma para Doente

Para todos os casos, podemos ver que o score está alto justamente para o traço esperado.

Por exemplo: se analisarmos o histograma para Normal, vemos que os scores estão altos justamente para pacientes do grupo Normal (verde), enquanto os pacientes do grupo Doente estão com score baixo. Já os pacientes do grupo Suspeito estão com score intermediário.
"""

pred_Normal = rf.predict_proba(X_test)[:,0]
pred_Suspeito = rf.predict_proba(X_test)[:,1]
pred_Doente = rf.predict_proba(X_test)[:,2]

bins = np.linspace(0,1,20)

plt.figure(figsize=(15,5))
plt.title('Score Normal', fontsize=20)
plt.hist(pred_Normal[Y_test==1], bins=bins, density=True, color='g', alpha=0.3, rwidth=0.8, label='Normal')
plt.hist(pred_Normal[Y_test==2], bins=bins, density=True, color='b', alpha=0.3, rwidth=0.8, label='Suspeito')
plt.hist(pred_Normal[Y_test==3], bins=bins, density=True, color='r', alpha=0.3, rwidth=0.8, label='Doente')
plt.legend()

plt.figure(figsize=(15,5))
plt.title('Score Suspeito', fontsize=20)
plt.hist(pred_Suspeito[Y_test==1], bins=bins, density=True, color='g', alpha=0.3, rwidth=0.8, label='Normal')
plt.hist(pred_Suspeito[Y_test==2], bins=bins, density=True, color='b', alpha=0.3, rwidth=0.8, label='Suspeito')
plt.hist(pred_Suspeito[Y_test==3], bins=bins, density=True, color='r', alpha=0.3, rwidth=0.8, label='Doente')
plt.legend()

plt.figure(figsize=(15,5))
plt.title('Score Doente', fontsize=20)
plt.hist(pred_Doente[Y_test==1], bins=bins, density=True, color='g', alpha=0.3, rwidth=0.8, label='Normal')
plt.hist(pred_Doente[Y_test==2], bins=bins, density=True, color='b', alpha=0.3, rwidth=0.8, label='Suspeito')
plt.hist(pred_Doente[Y_test==3], bins=bins, density=True, color='r', alpha=0.3, rwidth=0.8, label='Doente')
plt.legend();

"""Aqui vamos avaliar como foi a classificação.

No histograma "Público Normal", concluímos que a partir de 0.5 é seguro dizer que o paciente está saudável.

No histograma "Público Suspeito", está bastante espalhado. Podemos assumir que, a partir de 0.2, há suspeita de doença, então talvez seja bom encaminhar o paciente para um clínico geral, e não especialista.

No histograma "Público Doente", a partir de 0.4 as classificações estão corretas.
"""

plt.figure(figsize=(15,5))
plt.title('Público Normal', fontsize=20)
plt.hist(pred_Normal[Y_test==1], bins=bins, density=True, color='g', alpha=0.3, rwidth=0.8, label='Normal classificado no grupo Normal')
plt.hist(pred_Suspeito[Y_test==1], bins=bins, density=True, color='b', alpha=0.3, rwidth=0.8, label='Normal, porém classificado no grupo Suspeito')
plt.hist(pred_Doente[Y_test==1], bins=bins, density=True, color='r', alpha=0.3, rwidth=0.8, label='Normal, porém classificado no grupo Doente')
plt.legend()

plt.figure(figsize=(15,5))
plt.title('Público Suspeito', fontsize=20)
plt.hist(pred_Normal[Y_test==2], bins=bins, density=True, color='g', alpha=0.3, rwidth=0.8, label='Suspeito, porém classificado no grupo Normal')
plt.hist(pred_Suspeito[Y_test==2], bins=bins, density=True, color='b', alpha=0.3, rwidth=0.8, label='Suspeito classificado no grupo Suspeito')
plt.hist(pred_Doente[Y_test==2], bins=bins, density=True, color='r', alpha=0.3, rwidth=0.8, label='Suspeito, porém classificado no grupo Doente')
plt.legend()

plt.figure(figsize=(15,5))
plt.title('Público Doente', fontsize=20)
plt.hist(pred_Normal[Y_test==3], bins=bins, density=True, color='g', alpha=0.3, rwidth=0.8, label='Doente, porém classificado no grupo Normal')
plt.hist(pred_Suspeito[Y_test==3], bins=bins, density=True, color='b', alpha=0.3, rwidth=0.8, label='Doente, porém classificado no grupo Suspeito')
plt.hist(pred_Doente[Y_test==3], bins=bins, density=True, color='r', alpha=0.3, rwidth=0.8, label='Doente classificado no grupo Doente')
plt.legend();