# -*- coding: utf-8 -*-
"""clusterizacao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cvXUs-NA8mpKsyWf8eWCp0uPnD0MT_us

**Importar bibliotecas**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.cluster import KMeans

from google.colab import drive

"""**Problema**

Um shopping quer melhorar o atendimento de seus clientes com base nas preferências de compras deles.
"""

drive.mount('/content/drive')

PATH='drive/My Drive/FLAI/00_fundamentos/03_clusterizacao/'
DF=pd.read_csv(PATH+'base_cluster.csv', sep=',')

DF

# fixar ID como índice
# utilizar gastos para fazer os agrupamentos (eliminar ano de nascimento e renda)
df = DF.set_index('ID').filter(regex='Mnt', axis='columns')
df

"""**Avaliar clientes**

Vamos ver quantos % cada cliente gastou em cada categoria (comparando com o total que ele mesmo consumiu).
"""

soma = df.sum(axis='columns') # soma as quantidades de produtos consumidos pelo cliente
porcentagens = df.divide(soma, axis='index') # divide o valor de cada categoria pela soma
porcentagens

"""Vamos criar 4 clusters porque queremos dividir os clientes em 4 categorias."""

km = KMeans(n_clusters=4)
km.fit(porcentagens)

"""**Resultados**"""

clus = km.predict(porcentagens)
np.unique(clus, return_counts=True) # ver quantos clientes estão em cada cluster criado

porcentagens.loc[:, 'cluster'] = clus # adicionar nova coluna ao dataframe
porcentagens

"""**Analisar resultados**

*  Cluster 0: 41% dos gastos é em carne
*  Cluster 1: 74% dos gastos é em vinho
*  Cluster 2: todos os gastos estão entre 10% e 30%, mas a maior parte (27%) está em Gold Products
*  Cluster 3: 50% dos gastos é em vinho
"""

aux=porcentagens.groupby('cluster').mean() # agrupar por cluster e ver a média
aux

"""**Visualizar clusters**"""

plt.figure(figsize=(15,2*5))
colors = ['b', 'r', 'k', 'g']
for cl in aux.index:
  plt.subplot(2,2,cl+1,projection='polar')
  plt.fill(aux.loc[cl], color=colors[cl], alpha=0.3)
  plt.title(cl, fontsize=15)

"""**Explorar mais padrões**

Voltemos ao dataframe original (que contém ano de nascimento e renda) para adicionar a coluna de cluster. Depois vamos verificar a média de ano de nascimento por cluster.
"""

DF.loc[:,'cluster'] = clus # adicionar a coluna de cluster
DF.groupby('cluster').Year_Birth.mean()

"""Verificar o mesmo para renda:"""

DF.groupby('cluster').Income.mean()