# -*- coding: utf-8 -*-
"""dummy_serie_temporal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q5L5qFu5F5M3A5yAT1wzZVOb_Lys6bDn

**Importar bibliotecas**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import drive

"""**Série temporal mensal do saldo total de operações de crédito da indústria de alimentos**

Fonte: https://dadosabertos.bcb.gov.br/dataset/27743-saldo-das-operacoes-de-credito-por-atividade-economica---industria-de-alimentos

"""

drive.mount('/content/drive')

PATH='drive/My Drive/FLAI/00_fundamentos/00_dummy/'
df=pd.read_csv(PATH+'bcdata.sgs.27743.csv', sep=';')
df.loc[:, 'data'] = pd.to_datetime(df.data, format='%d/%m/%Y')

df

"""**Plotar gráfico dos dados**"""

plt.figure(figsize=(15,5))
plt.plot(df.data, df.valor, ".-")
plt.grid()

"""**Como visualizar dados a partir de uma certa data**"""

print(df.loc[df.data>'2020-01-01'])

print("\nprimeiro valor a partir de 2020-01-01: ", df.loc[df.data>'2020-01-01'].valor.iloc[0])

"""**Criar modelo de predição:** vamos supor que o mês seguinte terá o mesmo resultado do mês anterior"""

predicoes = []
erros = []

for dat in df.data: # para cada data do conjunto
  if dat==pd.to_datetime('2012-01-01'): # é a primeira data da tabela
    erros.append(np.nan) # não há erro, pois não há data anterior para comparar
    predicoes.append(np.nan)
    continue
  valor = df.loc[df.data==dat].valor.iloc[0] # guarda o valor para dat
  pred = df.loc[df.data==(dat-pd.DateOffset(months=1))].valor.iloc[0] # guarda o valor para 1 mês antes de dat
  predicoes.append(pred) # salva no array de predições
  erros.append(pred-valor) # vê a diferença entre o valor previsto e o real

"""**Criar dataframe para as predições e erros**"""

df_pred = pd.DataFrame() # criar um dataframe para as predições
df_pred.loc[:, 'data'] = df.data # pega datas da tabela original
df_pred.loc[:, 'valor'] = df.valor # pega valores da tabela original
df_pred.loc[:, 'predicoes'] = predicoes # pega o array 'predicoes' que criamos anteriormente
df_pred.loc[:, 'erros'] = erros # pega o array 'erros' que criamos anteriormente
df_pred

"""**Plotar gráfico dos erros**: quanto a predição errou em relação ao que ocorreu de fato?"""

plt.figure(figsize=(15,5))
plt.plot(df_pred.data, df_pred.erros, ".-")
plt.grid()

"""**Plotar gráficos de valores reais e predições para data a partir de 2020-01-01**"""

plt.figure(figsize=(15,5))
plt.plot(df_pred.data, df_pred.valor, ".-")
plt.plot(df_pred.data, df_pred.predicoes, ".-")
plt.grid()
plt.xlim(left=pd.to_datetime('2020-01-01')) # definir o início do eixo x a partir de 2020-01-01

"""**Aproveitar as funcionalidades da biblioteca**

Até agora, construímos manualmente o nosso modelo que desloca os valores (de 1 mês), mas na biblioteca já existe uma função para isso. Vamos adicionar ao dataframe original uma coluna de predições, utilizando a função.
"""

df.loc[:, 'predicoes'] = df.valor.shift(1) # desloca os valores da tabela 1 linha para baixo
df.loc[:, 'erros'] = df.predicoes-df.valor # faz a diferença entre coluna de predições e de valor real
df