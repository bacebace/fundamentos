# -*- coding: utf-8 -*-
"""regressao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ItHX-sXcY3yVIu80O-G49NGGyBzs5x1i

**Importar bibliotecas**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

from google.colab import drive

"""**Problema**

Para melhorar sua concessão de crédito, um banco quer prever quanto é a renda mensal de seus clientes, mesmo considerando que eles podem movimentar contas de outros bancos e que eles não declarem ou tragam comprovante de renda.
"""

drive.mount('/content/drive')

PATH='drive/My Drive/FLAI/00_fundamentos/02_regressao/'
df=pd.read_csv(PATH+'base_banco.csv', sep=',')

df

"""**Histogramas**

Queremos prever a renda, então vejamos o histograma.

No primeiro gráfico (histograma), vemos que fica difícil de enxergar. Há uma barra muito grande perto do zero, e barras minúsculas distribuídas para outros valores.

No segundo gráfico (histograma), separaramos os valores de maneira logarítmica, o que facilitou a visualização dos dados. É possível concluir que a maior parte dos clientes tem renda entre 1k e 10k.

Diferentemente da classificação, na regressão a variável tem valores contínuos. Devemos nos atentar a isso.
"""

plt.figure(figsize=(15,5))
plt.hist(df.MonthlyIncome, bins=100)

bins=np.logspace(0,6.5,100) # começa em 10^0 e vai até 10^6.5 (num espaço de 100 'caixinhas')
plt.figure(figsize=(15,5))
plt.hist(df.MonthlyIncome, bins=bins, rwidth=0.8)
plt.xscale('log')
plt.xticks(fontsize=15);

"""**Analisar dados**

Podemos tentar entender relações entre as variáveis (idade, quantidade de dependentes, etc) e a renda mensal (que é o que queremos prever).

Foi colocada transparência no ponto (alpha=0.01) para mostrar que, se a cor no gráfico estiver intensa, é porque há mais pontos naquela região.

Vemos que pessoas com menos de 30 anos têm renda abaixo dos 10k, e até mesmo abaixo de 1k.

Entre os 30 e 70 anos, a maior parte se concentra entre 1k e 30k. 

A partir dos 70 anos, cai para abaixo dos 10k, mas se mantém acima de 1k.
"""

plt.plot(df.age, df.MonthlyIncome, '.', alpha=0.01) # eixo x = idade, eixo y = renda mensal
plt.yscale('log') # assim como no caso anterior, deixar em escala log para facilitar visualização
plt.grid()

"""Para deixar a análise mais detalhada, podemos criar um histograma por faixa etária.

Os gráficos confirmam os padrões que verificamos anteriormente.

A ideia de analisar os gráficos é para entender o que os dados nos mostram, para saber o que o modelo vai utilizar em seu treinamento.
"""

plt.figure(figsize=(15,5))
plt.hist(df.loc[(df.age>=20) & (df.age<30)].MonthlyIncome, bins=np.logspace(0,6.5,100), rwidth=0.8) 
plt.xscale('log') 
plt.title('Entre 20 e 30 anos')
plt.grid()

plt.figure(figsize=(15,5))
plt.hist(df.loc[(df.age>=30) & (df.age<40)].MonthlyIncome, bins=np.logspace(0,6.5,100), rwidth=0.8) 
plt.xscale('log') 
plt.title('Entre 30 e 40 anos')
plt.grid()

plt.figure(figsize=(15,5))
plt.hist(df.loc[(df.age>=40) & (df.age<50)].MonthlyIncome, bins=np.logspace(0,6.5,100), rwidth=0.8) 
plt.xscale('log')
plt.title('Entre 40 e 50 anos')
plt.grid()

plt.figure(figsize=(15,5))
plt.hist(df.loc[(df.age>=50) & (df.age<60)].MonthlyIncome, bins=np.logspace(0,6.5,100), rwidth=0.8) 
plt.xscale('log')
plt.title('Entre 50 e 60 anos')
plt.grid()

plt.figure(figsize=(15,5))
plt.hist(df.loc[(df.age>=60) & (df.age<70)].MonthlyIncome, bins=np.logspace(0,6.5,100), rwidth=0.8) 
plt.xscale('log')
plt.title('Entre 60 e 70 anos')
plt.grid()

"""**Separar variáveis e conjuntos de treinamento/teste**"""

X = df.drop('MonthlyIncome', axis='columns')
Y = df.MonthlyIncome

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.3)

"""**Treinar modelo**"""

rf = RandomForestRegressor(n_estimators=500, max_depth=8, n_jobs=-1)
rf.fit(X_train, Y_train)

"""**Testar modelo**

Na tabela para comparar valores do "gabarito" com as predições feitas pelo modelo, vemos que há predições próximas do valor real, mas também temos resultados bastante discrepantes.
"""

df_compara = pd.DataFrame()
df_compara.loc[:, 'gabarito'] = Y_test
df_compara.loc[:, 'predicoes'] = rf.predict(X_test)

df_compara.loc[:, 'erro'] = Y_test - rf.predict(X_test)

df_compara

"""**Média de erro (absoluto)**"""

erro_absoluto = np.abs(Y_test - rf.predict(X_test))
erro_absoluto.mean()

mean_absolute_error(Y_test, rf.predict(X_test)) # já existe função para isso!

"""**Avaliar se o modelo tem viés pelos histogramas**

Podemos ver, pelo segundo gráfico, que o modelo subestima a quantidade de pessoas com renda mais baixa. Ele diz que a maior parte ganha entre 1k e 10k, concentrando-se em torno de 8k.

Isso indica que precisamos melhorar o modelo, separar melhor os dados: talvez retirar as exceções, treinar de maneira separada o conjunto de baixa renda, etc.
"""

plt.figure(figsize=(15,5))
plt.hist(Y_test, bins=np.logspace(0,6.5,100), color='b', alpha=0.3, density=True, label='gabarito')
plt.hist(rf.predict(X_test), bins=np.logspace(0,6.5,100), color='r', alpha=0.3, density=True, label='predicao')
plt.xscale('log')
plt.legend()

# como teve bastante gente de renda=0 no grupo de teste, vamos começar a partir de 1 (no logspace)
# para eliminar as de renda=0
plt.figure(figsize=(15,5))
plt.hist(Y_test, bins=np.logspace(1,6.5,100), color='b', alpha=0.3, density=True, label='gabarito')
plt.hist(rf.predict(X_test), bins=np.logspace(1,6.5,100), color='r', alpha=0.3, density=True, label='predicao')
plt.xscale('log')
plt.legend();